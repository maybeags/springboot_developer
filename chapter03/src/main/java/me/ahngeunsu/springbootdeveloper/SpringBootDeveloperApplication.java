package me.ahngeunsu.springbootdeveloper;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


/*
    1. 스프링 부트 3 구조 살펴보기
        각 계층이 양 옆의 계층과 통신하는 구조
        계층 : 각자의 역할과 책임이 있는 어떤 소프트웨어의 구성 요소 -> 각 계층은 소통할 수는 있지만 다른 계층에 직접 간섭하거나 영향을 미치진 않음

        카페와 빵집으로 이해하는 계층
        카페는 커피를, 빵집은 빵을 팔게 될텐데, 피룡한 경우 협업 관계를 맺어 어떤 손님이 커피를 사면 빵을 할인해 줄 수 있음 -> 계층 간 소통

        스프링 부트에서의 계층
        1) 프레젠테이션(presentation)
            HTTP 요청을 받고 이 요청을 비지니스 계층으로 전송하는 역할 -> Controller가 프레젠테이션 계층 역할
                TestController 클래스와 같은 것을 의미하며 스프링 부트 내에 여러 개가 있을 수 있음.

        2) 비지니스(business)
            모든 비지니스 로직을 처리.
            비지니스 로직 : 서비스를 만들기 위한 로직을 의미하며, 웹 사이트에서 벌어지는 모든 작업 -> 주문 서비스라고 한다면 주문 개수, 가격 등의
            데이터를 처리하기 위한 로직, 추문 처리를 하다가 발생하는 예외 처리 로직, 주문을받거나 취소하는 것 같이 프로세스를 구현하기 위한 로직 등을 의미
            서비스가 비지니스 계층의 역할을 함.

        3) 퍼시스턴스(persistence)
            모든 데이터베이스 관련 로직을 처리. 이 과정에서 데이터베이스에 접근하는 DAO 객체를 사용할 수도 있음. DAO는 데이터베이스 계층과 상호작용하기
            위한 객체라고 이해하면 편리함 -> 리포지터리가 퍼시스턴스 계층의 역할을 함.

        계층은 개념의 영역이고 Controller, Service, Repository는 실제 구현을 위한 영역 -> 수업 시에 적용 예정입니다.

        스프링 부트 프로젝트 디렉터리 구성하며 살펴보기
            : 스프링 부트에는 정해진 구조가 없지만 추천 프로젝트 구조가 있고, 이를 많은 개발자가 따르므로 수업 시에도 해당 구조를 따라 개발할 예정

            main : 실제 코드를 작성하는 공간. 프로젝트 실행에 필요한 소스 코드나 리소스 파일은 모두 이 폴더 안에 들어 있음.

            test : 프로젝트의 소스 코드를 테스트할 목적의 코드나 리소스 파일이 들어 있음.

            build.gradle : 빌드를 설정하는 파일. 의존성이나 플러그인 설정과 같이 빌드에 필요한 설정을 할 때 사용

            settings.gradle : 빌드할 프로젝트의 정보를 설정하는 파일.

                main 디렉토리 구성하기
                    : main 디렉토리 내에 java와 resources로 구성되어 있음. 여기에 아직 추가하지 못했던 스프링 부트 프로젝트의 구성 요소 추가 예정
                        01 단계 - HTML과 같은 뷰 관련 파일을 넣을 template 디렉토리를 생성 resource 우클릭 -> new directory -> templates
                        02 단계 - static 디렉토리는 JS, CSS, 이미지와 같은 정적 파일을 넣는 용도로 사용함. -> 이미 만들었으므로 생략
                        03 단계 - 스프링 부트 설정을 할 수 있는 application.yml 파일을 생성 -> 해당 파일은 스프링 부트 서버가 실행되면
                            자동으로 로딩되는 파일. 데이터베이스의 설정 정보, 로깅 설정 정보 등이 들어갈 수도 있고, 직접 정의할 때 사용하기도 함.
                            앞으로 프로젝트를 진행하며 자주 사용할 파일이므로 잊지 말고 만들 것 -> 또한 github에 올리면 안됨.

    2. 스프링 부트 3 프로젝트 발전시키기

        각 계층의 코드를 추가할 예정 -> 이를 통해 계층이 무엇이고 스프링 부트에서는 계층을 어떻게 나누는지 감을 잡아나가기를 바람.
            여기서는 의존성을 추가한 다음 -> 프레젠테이션 계층, 비지니스 계층, 퍼시스턴스 계층 순서대로 코드를 추가할 예정

            build.gradle에 의존성 추가하기
                01 단계 - 스프링 부트용 JPA인 스프링 데이터 JPA, 로컬 환경과 테스트 환경에서 사용할 인메모리 데이터베이스인 H2, 반복 메서드 작성
                    작업을 줄여주는 라이브러리인 롬복을 추가할 예정 -> build.gradle 들어가서 추가할 것 -> 추가한 것들이 정확하게 뭔지 몰라도
                        아직은 괜찮음. 현재 수준에서는 데이터베이스의 테이블을 객체로 바꿔서 가져오게 하는 도구들이라고 생각해주면 됨.

                        implementation : 프로젝트 코드가 컴파일 시점과 런타임에 모두 해당 라이브러리를 필요로 할 때 사용
                        testImplementation : 프로젝트의 테스트 모드를 컴파일하고 실해앟ㄹ 때만 필요한 의존성을 설정, 테스트 코드에서만 사용,
                            메인 애플리케이션 코드에서는 사용하지 않음
                        runtimeOnly : 런타임에만 필요한 의존성을 지정, 컴파일 시에는 필요하지 않지만, 애플리케이션을 실행할 때 필요한 라이브러리
                            설정
                        compileOnly : 컴파일 시에만 필요, 런타임에는 포함되지 않아야 하는 의존성 지정
                        annotationProcessor : 컴파일 시에 애너테이션을 처리할 때 사용하는 도구의 의존성 지정

                02 단계 - gralde 새로고침 누르고 의존성 다운로드

            프레젠테이션, 서비스, 퍼시스턴스 계층 만들기

                01 단계 - 프레젠테이션 계층에 속하는 컨트롤러 관련 코드를 작성 -> TestController 이용 예정

                02 단계 - 비지니스 계층 코드 -> TestController와 같은 위치에 TestService 파일 생성

                03 단계 - 퍼시스턴스 계층 코드 작성 -> 같은 위치에 Member DAO 생성, 실제 DB에 접근하는 코드를 작성.

                04 단계 - 매핑 작업에는 '인터페이스' 파일이 필요. MemberRepository 인터페이스 파일을 새로 생성

            작동 확인하기

                데이트베이스에 결과물을 볼 수 있는 데이터가 하나도 입력되지 않은 상태.
                보통은 이런 실행 테스트를 하기 위해 애플리케이션을 실행할 때마다 SQL 문을 데이터베이스에 직접 넣는데,
                현재는 인메모리 데이터베이스를 사용하고 있기 때문에 새로 실행할 때마다 데이터가 사라져 매우 불편한 상태.
                -> 이를 해결하기 위해 애플리케이션을 실행할 때마다 원하는 데이터를 자동으로 넣는 작업

                01 단계 - sql 파일 생성. resources 디렉토리에 data.sql 파일을 생성

                02 단계 - 기존에 만들어놓은 application.yml 파일을 열어 코드 변경.
                    show-sql, format_sql 옵션은 애플리케이션 실행 과정에 데이터베이스에 쿼리할 일이 있으면 실행 구문을 모두 보여주는 옵션,
                    defer-datasource-initialization 옵션은 애플리케이션을 실행할 때 테이블을 생성하고 data.sql 파일에 있는 쿼리를
                    실행하도록 하는 옵션. -> 수정 후에 SpringBootApplication 파일 탭을 누른 다음 재실행 해야 합니다.

                03 단계 - 서버 실행 후 콘솔창에서 ctrl + f 누르고 CREATE TABLE을 검색해 테이블이 잘 만들어졌는지 확인합니다.

                04 단계 - 포스트맨으로 HTTP 요청을 시도합니다. 포스트맨을 실행 -> HTTP 메세더를 GET, http://localhost:8080/test을 입력하세요.
                    그런 다음 Send 버튼을 눌러 스프링 부트 서버에 HTTP 요청을 전송하세요. 그러면 좀 전에 data.sql 파일로 작성해 저장한 데이터를 포스트맨,
                    즉, 클라이언트에서 확인할 수 있습니다.

                    데이터를 포스트맨에서 보기 까지의 과정

HTTP 요청 ---->   TestController.java <----> TestService.java <----> MemberRepository.java <----> Database
url:/test --->   프레젠테이션 계층       <----> 비지니스 계층        <----> 퍼시스턴스 계층           <----> 데이터베이스





 */
@SpringBootApplication
public class SpringBootDeveloperApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringBootDeveloperApplication.class, args);
    }
}

