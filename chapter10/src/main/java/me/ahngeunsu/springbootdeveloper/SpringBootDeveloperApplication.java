package me.ahngeunsu.springbootdeveloper;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@EnableJpaAuditing
@SpringBootApplication
public class SpringBootDeveloperApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringBootDeveloperApplication.class, args);
    }
}
 /*
    사전 지식 : OAuth
        OAuth는 제3의 서비스에 계정 관리를 맡기는 방식. naver로 로그인하기, 구글로 로그인하기와 같은 예시를 떠올리셔야 합니다.

        OAuth 관련 용어 정리
            리소스 오너(Resource Owner) : 인증 서버에 자신의 정보를 사용하도록 허가하는 주체. 서비스를 이용하는 사용자가 리소스
                오너에 해당.
            리소스 서버(Resource Server) : 리소스 오너의 정보를 가지며, 리소스 오너의 정보를 보호하는 주체를 의미. 네이버, 구글,
                페이스북이 리소스 서버에 해당
            인증 서버(Authorization Server) : 클라이언트에게 리소스 오너의 정보에 접근할 수 있는 토큰을 발급하는 역할을 하는
                애플리케이션을 의미.
            클라이언트 애플리케이션(Client Application) : 인증 서버에게 인증을 받고 리소스 오너의 리소스를 사용하는 주체를 의미.
                지금 만들고 있는 서비스가 이에 해당함(그러니까 저희가 만드는 블로그).

        OAuth를 사용하면 인증 서버에서 발급 받은 토큰을 사용해서 리소스 서버에 리소스 오너의 정보를 요청하고 응답받아 사용 가능.
            그렇다면 리소스 오너의 정보를 어떻게 취득할 수 있는 방법이 필요.

            리소스 오너 정보를 취득하는 네 가지 방법
                1) 권한 부여 코드 승인 타입(Authorization Code Grant Type) : OAuth 2.0에서 가장 잘 알려진 인증 방법.
                    클라이언트가 리소스에 접근하는 데 사용하며, 권한에 접근할 수 있는 코드와 리소스 오너에 대한 액세스 토큰을 발급
                    받는 방식.

                2) 암시적 승인 타입(Implicit Grant Type) : 서버가 없는 자바스크립트 웹 애플리케이션 클라이언트에서 주로 사용.
                    클라이언트가 요청을 보내면 리소스 오너의 인증 과정 이외에는 권한 코드 교환 등의 별다른 인증 과정을 거치지 않고
                    액세스 토큰을 제공받는 방식.

                3) 리소스 소유자 암호 자격증명 승인 타입(Resource Owner Password Credentials) : 클라이언트의 패스워드를
                    이용해서 액세스 토큰에 대한 사용자의 자격 증명을 교환하는 방식

                4) 클라이언트 자격증명 승인 타입(Client Credentials Grant) : 클라이언트가 컨텍스트 외부에서 액세스 토큰을
                    얻어 특정 리소스에 접근을 요청할 때 사용하는 방식.

            저희는 첫 번째인 OAuth2를 이용하는 방식으로 설명합니다 -> OAuth에서 가장 유명하기도 하고...

            권한 부여 코드 승인 타입이란?
                애플리케이션 / 리소스 오너(사용자) / 리소스 서버 / 인증 서버가 어떤 순서로 인증을 하는지 알 필요가 있습니다.
                                3. 인증 코드 발급
                애플리케이션 ----------------------------→ 인증 서버
                    ↑   \      4. 액세스 토큰으로 발급           ↑
                    |    \                                  |
                    |     \                                 |
                    |      \                                |
     1. 권한 요청     |       5. 액세스 토큰으로 데이터에 접근       | 인증 서버에
                    |                              \        | 인증 작업 위임
                    |                               \       |
                    |                                \      |
                    |                                 \     |
                    |                                   ↘︎  |
                리소스 오너 ←---------------------------- 리소스 서버
                              2. 데이터 접근용 권한 부여

            1. 권한 요청이란?
                권한 요청은 클라이언트, 즉, 스프링 부트 서버가 특정 사용자 데이터에 접근하기 위해 권한 서버,
                즉, 카카오나 구글 권한 서버에 요청을 보내는 겁니다. 요청 URI는 권한 서버마다 다르지만, 보통은
                클라이언트 ID, 리다이렉트 URI, 응답 타입 등을 파라미터로 보냅니다. 실제 요청에 쓰이는
                요청 URI 예시를 통해 주요 파라미터를 소개합니다.

                🍎권한 요청을 위한 파라미터 예
                GET spring-authorization-server.example/authorize?
                    client_id=66a36b4c2&
                    redirect_uri="http://localhost:8080/myapp&
                    response_type=code&
                    scope=profile

                    client_id : 인증 서버가 클라이언트에 할당한 고유 식별자. 이 값은 클라이언트 애플리케이션을 OAuth
                        서비스에 등록할 때 서비스에서 생성하는 값

                    redirect_uri : 로그인 성공시 이동해야 하는 URI입니다.

                    response_type : 클라이언트가 제공받길 원하는 응답 타입. 인증 코드를 받을 때는 code값을 포함해야 합니다.

                    scope : 제공받고자 하는 리소스 오너의 정보 목록.

             2. 데이터 접근용 권한 부여
                인증 서버에 요청을 처음 보내는 경우 사용자에게 보이는 페이지를 로그인 페이지로 변경하고 사용자의 데이터에 접근 동의를
                얻습니다. 이 과정은 최초 1회만 진행. 이후에는 인증 서버에서 동의 내용을 저장하고 있기 때문에 로그인만 진행. 로그인이 성공하면
                권한 부여 서버는 데이터에 접근할 수 있게 인증 및 권한 부여를 수신.

             3. 인증 코드 제공
                사용자가 로그인에 성공하면 권한 요청 시에 파라미터로 보낸 redirect_uri로 리다이렉션됩니다.
                이때 파라미터에 인증코드를 함께 제공합니다.

                🍎인증 코드 예시
                GET http://localhost:8080/myapp?code=a1s2f3mcj2

             4. 액세스 코드 응답
                인증 코드를 받으면 액세스 토큰으로 교환해야 합니다. 액세스 토큰은 로그인 세션에 대한 보안 자격을 증명하는 식별 코드를 의미.
                보통 다음과 같이 /token POST 요청을 보냅니다.

                🍎/token POST 요청 예시
                POST spring-authorization-server .example.com/token
                {
                    "client_id": "66a36b4c2",
                    "client_secret": "aabb11dd44",
                    "redirect_uri": "http://localhost:8080/myapp",
                    "grant_type": "authorization_code",
                    "code": "a1b2c3d4e5f67h8"
                }

                client_secret : OAuth 서비스에 등록할 때 제공받는 비밀키

                grant_type : 권한 유형을 확인하는 데 사용. 이 때는 authorization_code로 설정해야 함. 권한 서버는 요청 값을 기반으로
                    유효한 정보인지 확인하고, 유효한 정보라면 액세스 토큰으로 응답합니다.

                🍎액세스 토큰 응답 값의 예
                {
                    "access_token": "aasdffb",
                    "token_type": "Bearer"
                    "expires_in": 3600,
                    "scope": "openid profile"
                ...생략...
                }

            5. 액세스 토큰으로 API 응답 & 반환
                이제 제공받은 액세스 토큰으로 리소스 오너의 정보를 가져올 수 있습니다. 정보가 필요할 때마다 API 호출을 통해 정보를 가져오고
                리소스 서버는 토큰이 유효한지 검사한 뒤에 응답합니다.

                🍎리소스 오너의 정보를 가져오기 위한 요청 예
                    GET spring-authorization-resource-server .example.com/userinfo
                    Header: Authorization: Bearer aasdffb

                여기까지가 권한 부여 코드 승인 타입의 흐름입니다. 대부분의 OAuth를 구현한 라이브러리는 이 흐름을 바탕으로 코드를 구현하기 때문에
                흐름을 이해하고 넘어가는 것이 좋습니다.

        쿠키란?
            사용자가 어떤 웹사이트를 방문했을 때 해당 웹사이트의 서버에서 여러분의 로컬 환경에 저장하는 작은 데이터를 의미함. 이 값이 있기 때문에
            이전에 방문한 적이 있는지 알 수 있고, 이전에 로그인을 했다면 로그인 정보도 유지할 수 있는 것입니다. 쿠키는 키와 값으로 이루어져 있으며,
            만료 기간, 도메인 등의 정보를 가지고 있습니다. HTTP 요청을 통해 쿠키의 특정 키에 값을 추가할 수 있습니다.

                흐름                  GET /members
                    1. 브라우저에서 요청 -------------> 2. 서버에서 쿠키 설정
                                                            |
                                                            ↓   Set-Cookie: member_id=1
                     4. GET /members  <--------------- 3. 브라우저에 쿠키 저장
                        Cookie: member_id = 1

    2. 토큰 발급받기
        구글 로그인 기능을 추가하려면 인증 서버에게 토큰을 제공받아야 합니다.

            01 단계 - 구글 클라우드 콘솔 https://cloud.google.com/cloud-console로 접속한 후 [콘솔] 버튼을 클릭
                구글 콘솔을 처음 사용하는 경우 구글 클라우드 사용 동의 관련 창이 나타납니다. 구글 콘솔을 처음 사용하는 경우 사용 동의 절차를 마치세요.

            02 단계 - 콘솔로 이동 후에 [프로젝트 선택] 누르고 [새 프로젝트] 버튼을 눌러줍니다.

            03 단계 - 왼쪽 햄버거 메뉴에서 [API 및 서비스 -> 사용자 인증 정보] 버튼을 눌러 사용자 인증을 관리하는 페이지로 이동합니다.

            04 단계 - 사용자 인증 정보를 만들려면 OAuth 동의 화면을 먼저 구성해야 합니다. [동의 화명 구성] 버튼을 누르고 User Type을
                외부용으로 선택한 후 [만들기] 버튼을 클릭합니다.

            05 단계 - 값 입력 화면이 나타납니다. 앱 이름은 springboot-developer로 입력하거나 자유롭게 입력하고, 이메일, 개발자 연락처를 꼭
                입력하세요. 입력을 마쳤다면 [저장 후 계속] 버튼을 눌러 다음으로 진행.

            06 단계 - 범위 설정 화면에서는 [범위 추가 또는 삭제] 버튼을 누르고 openid와 이메일 주소를 추가하고 [업데이트]를 눌러 마무리합니다.
                작업을 마치면 [저장 후 계속] 버튼을 누르세요.

            07 단계 - 테스트 사용자는 추가하지 않습니다. [저장 후 계속] 버튼을 클릭합니다. 그러면 요약 화면이 나타납니다. [대시 보드로 돌아가기]를
                눌러 작업을 마치세요.

            08 단계 - 대시보드에서 [사용자 인증 정보 -> 사용자 인증 정보 만들기 -> OAuth 클라이언트 ID]를 순서대로 누르세요.

            09 단계 - 애플리케이션 유형은 [웹 애플리케이션], 이름은 springboot-developer, 승인된 리디렉션 URI에는
                http://localhost:8080/login/oauth2/code/google을 입력한 뒤 [만들기]. 그 뒤에 나오는 클라이언트 ID와
                클라이언트 보안 비밀번호는 애플리케이션에서 사용하는 값이므로 따로 메모하세요. 생성된 OAuth 인증값은 추후에 리소스 오너의 정보에
                접근할 때 사용합니다 -> 혹시 메모 안해도 생성된 인증값을 눌러 확인할 수 있으니까 괜찮습니다.
                근데 주소를 http로 입력하면 오류가 발생할 수 있습니다. 그럴 때는 API 및 서비스 -> OAuth 동의화면에 들어가서 게시 상태를 [테스트]
                로 변경해보세요.

            10 단계 - OAuth 설정값을 스프링 부트 애플리케이션 설정 파일에서 사용하기 위해 application.yml 파일을 열고 다음 내용을 추가하고,
                인증값은 깃허브 같은 외부 사이트에 절대로 업로드하면 안됩니다.

                이를 바탕으로 OAuth2 로그인 구현을 시작할겁니다.

    3. 스프링 시큐리티로 OAuth2를 구현하고 적용하기
        스프링 시큐리티를 이용해 OAuth2를 구현하겠습니다. 먼저 쿠키 관리 클래스를 구현하고, OAuth2에서 제공받은 인증 객체로 사용자 정보를
        가져오는 역할을 하는 서비스를 구현하겠습니다. 그 뒤에는 chapter08에서 구현한 WebSecurityConfig 클래스 대신 사용할 OAuth2
        설정 파일을 구현합니다. 마지막으로는 직접 테스트하도록 뷰를 구성할겁니다.

        의존성 추가하기
            01 단계 - OAuth2를 사용하기 위해 build.gradle 파일에 의존성을 추가하고 새로고침하세요.
                build.gradle 하시고 쿠키 관리 클래스 구현하기로 갑니다.

        쿠키 관리 클래스 구현하기
            01 단계 - util 패키지를 새로 만들고 CookieUtil.java파일을 생성한 뒤 코드를 입력하세요.
  */